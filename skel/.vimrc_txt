" Init {{{
set nocompatible
set t_Co=256           " 256 color terminal
set encoding=utf-8     " show unicode chars
set nonumber             " show line numbers
set wildmenu           " command autocomplete view
set wildchar=<Tab>
set noerrorbells       " quit beeping
set novisualbell       " i said, quit beeping
set t_vb=              " goddammit i said no beeping
set shortmess=I        " no welcome screen
set tabstop=2          " visual spaces per tab
set shiftwidth=2       " tab size of reindent > < operations
set expandtab          " always spaces, everywhere, forever
set autoindent         " guess smart indents

if !empty(&viminfo)
  set viminfo^=!       " better startup and shutdown
endif

set sessionoptions-=options " don't export every option to new sessions

set list
if &listchars ==# 'eol:$'
  set listchars=tab:\|\ ,trail:-,extends:>,precedes:<,nbsp:+ " extra listchars
endif
" }}}

" Movement and Keybindings {{{
let mapleader = ","   "<leader> is comma
let g:mapleader = "," "<leader> is comma everywhere

nnoremap j gj
nnoremap k gk

" switch quickly between buffers
nnoremap <leader>; :b#<cr>
vnoremap <leader>; <esc>:b#<cr>
inoremap <leader>; <esc>:b#<cr>

" better word wrap
set formatoptions=l
set lbr

" highlight last inserted text
nnoremap gV `[v`]

" make regexes very magic all the time
" thus enabling modern regex features
nnoremap / /\v
vnoremap / /\v

set backspace=indent,eol,start " backspace can move over lines
set whichwrap+=<,>,h,l         " left and right can move over lines

set nrformats-=octal           " don't assume 0-leader numbers are octal

set timeout                    " no weird delay in bindings
set timeoutlen=100             " if weird delay is there, it's short
set ttimeoutlen=10             " no delay on escape, though.

if !&scrolloff
  set scrolloff=5              " at least 5 lines below my cursor
endif
if !&sidescrolloff
  set sidescrolloff=5          " at least five columns to the right of it
endif
set display+=lastline

" make splits go down and right
set splitbelow
set splitright
" }}}

" Searching {{{
set incsearch  " search as characters are entered
set hlsearch   " hilight as characters are entered
set ignorecase " ignore case when searching
set smartcase  " but only ignore case when search is all lower case

" turn off search highlight
nnoremap <leader><space> :noh<cr>
" }}}

" OS Interoperation {{{
set hidden                  " allow hidden buffers with changes
set clipboard=unnamed       " clipboard interacts with OS
set nobackup                " Backup is what Time Machine is for
set nowb                    " Don't write backup file
set noswapfile              " Boy are .swps annoying huh
set mouse=a
set ttymouse=xterm2
" }}}

" Special Writing Mode {{{
let vim_markdown_preview_github=1
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'javascript', 'scheme']

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-fugitive' " git interactions
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/seoul256.vim'
call plug#end()

colorscheme seoul256

let g:goyo_width = "85%"
let g:goyo_linenr=1

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
autocmd! VimEnter * Goyo
autocmd! BufRead nested * Goyo

autocmd BufWritePost * !git add % && git commit -m %

function! s:goyo_enter()
  set syntax=markdown
  Limelight
  let b:quitting = 0
  let b:quitting_bang = 0
  autocmd QuitPre <buffer> let b:quitting = 1
  cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
endfunction

function! s:goyo_leave()
  " Quit Vim if this is the only remaining buffer
  if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
    if b:quitting_bang
      qa!
    else
      qa
    endif
  endif
endfunction
" }}}

" vim:foldmethod=marker:foldlevel=0
